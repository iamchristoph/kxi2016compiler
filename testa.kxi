// test.kxi
class _bufar{
  private int blob(int barf[], bool grub[]){return 89;}
  _bufar(){ }
  public int bubu;
  public char c;
  private int s;
  public rabuf muck(rabuf stuff) {
    int x;
    int y;
    x = y;
    x = 5 + y;
    x = y * 3 + s / 4 -s;
    this.c = 'c';
    this.s = x;
    return stuff;
  }
  public void print(int i) {
    cout << i;
  }
}

class rabuf{
  public int ex;
  private bool sucking;
  public char goof[];
  public int blah (){return 1;}
  public int bar(int i, int j) {
    _bufar momo;
    int a = goo [ex + 2];
    char chit;
    rabuf chitty;
    int uck = atoi(chit);
    int hit;
    char cu = itoa(hit);
    int goback;
    char A = 'A';
    this.sucking = blah() > this.ex;
    a = goback * hit;
    {
      chitty;
      if (uck == 5) {
        if (sucking) {
          cout << 'Z';
        } else {
          cout << 'A';
        }
        chit = 'Z';
      } else {
        a = hit/ex + 5;
        chit = itoa(a);
        if (5<4)
          cout << 'Y';
        else
          cin >> chit;
      }
    }
    if (5 < 4) {
      while (sucking) {
        cout << goof[1];
      }
    }
    return hit;
  }
  public _bufar buffy;
  public rabuf rabi;
  public rabuf ra[];
  public int foo[];
  public int goo[] = foo;
  rabuf (int hit, int sit){
    goof[10] = 'c';
    return this;
  }
} 
void kxi2016 main () {
  int cho = 5;
  int a = null;
  char c;
  rabuf rab;
  _bufar buf = new _bufar();
  buf.bubu = rab.ex;
  cout << 'c';
  cin >> a;
  cout << a;
  cho = buf.muck( rab).ex;
  cho = rab.blah();
  a = buf.muck(rab).ex = cho;
  a = rab.bar(cho + buf.bubu, rab.ex + cho);
  rab.goo = new int[cho + 5 / 4 - 1];
  rab.goo[5] = 3;
  rab = new rabuf(1, 2);
  rab.ra = new rabuf[5];
  rab.ra[2] = new rabuf(1, 2);
  //if (cho) rab[cho] = 5;
  //x = y.f(k, g) + g * r;
  cout << 5 + 5;
}
//nil this is {and} for '323' testi23ng '\t' '3' purposes
//@ 1 *  # -2 +342 - 98274