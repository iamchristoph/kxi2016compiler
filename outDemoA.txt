Start FRAME M201 N105 ;  Frame main backpatched to M201 backpatched to N105 
CALL M201  backpatched to M201 
STOP 
X104 FUNC X104 ;  Contructor for class iTree 
MOV N105 I102 ;  root(offset=0) = null 
RTN ; return from function xtor 
M107 FUNC M107 ;  int fib(['P106']) 
EQ N108 P106 T208 ;  T208 = root == 0 
BF T208 skipif209 ;  BranchFalse T208 (bool) skipif209 
RETURN N108 ; return int 0 from function func 
JMP skipelse210 ;  Jump skipelse210 
skipif209 EQ N109 P106 T211 ;  T211 = root == 1 
BF T211 skipif212 ;  BranchFalse T211 (bool) skipif212 
RETURN N109 ; return int 1 from function func 
JMP skipelse210 ;  Jump skipelse213 backpatched to skipelse210 
skipif212 SUB N109 P106 T214 ;  T214 = root - 1 
FRAME M107 this ;  fib(['P106']) 
PUSH T214 4 ;  T214, offset = -12 
CALL M107 
PEEK L215 ;  get return value 
SUB N110 P106 T216 ;  T216 = root - 2 
FRAME M107 this ;  fib(['P106']) 
PUSH T216 4 ;  T216, offset = -20 
CALL M107 
PEEK L217 ;  get return value 
ADD L217 L215 T218 ;  T218 = L215 + L217 
RETURN T218 ; return int T218 from function func 
skipelse210 RTN ; return from function func 
M112 FUNC M112 ;  bool add(['P111']) 
EQ N105 I102 T219 ;  T219 = root == null 
BF T219 skipif220 ;  BranchFalse T219 (bool) skipif220 
NEWI 13 L221 ;  new instance of iNode -> L221 
FRAME S268 L221 ;  static initializer for class iNode backpatched to S268 
CALL S268  backpatched to S268 
PEEK L221 
FRAME X134 L221 ['P111'] ;  iNode iNode(['P133']) 
PUSH P111 1 ;  key, offset = 0 
CALL X134 
PEEK L221 ;  get return value 
MOV L221 I102 ;  root(offset=0) = L221 
RETURN B113 ; return bool true from function func 
JMP skipelse223 ;  Jump skipelse223 
skipif220 FRAME M116 this ;  insert(['P114', 'P115']) 
PUSH P111 1 ;  key, offset = 0 
PUSH I102 4 ;  root, offset = 0 
CALL M116 
PEEK L224 ;  get return value 
RETURN L224 ; return bool L224 from function func 
skipelse223 RTN ; return from function func 
M116 FUNC M116 ;  bool insert(['P114', 'P115']) 
REF P115 I129 R225 ;  R225 = node.root offset = 12 
LT R225 P114 T226 ;  T226 = key < R225 
BF T226 skipif227 ;  BranchFalse T226 (bool) skipif227 
REF P115 I131 R228 ;  R228 = node.left offset = 4 
EQ N105 R228 T229 ;  T229 = R228 == null 
BF T229 skipif230 ;  BranchFalse T229 (bool) skipif230 
REF P115 I131 R231 ;  R231 = node.left offset = 4 
NEWI 13 L232 ;  new instance of iNode -> L232 
FRAME S268 L232 ;  static initializer for class iNode backpatched to S268 
CALL S268  backpatched to S268 
PEEK L232 
FRAME X134 L232 ['P114'] ;  iNode iNode(['P133']) 
PUSH P114 1 ;  key, offset = 0 
CALL X134 
PEEK L232 ;  get return value 
MOV L232 R231 ;  R231(offset=-21) = L232 
RETURN B113 ; return bool true from function func 
JMP skipelse234 ;  Jump skipelse234 
skipif230 REF P115 I131 R235 ;  R235 = node.left offset = 4 
FRAME M116 this ;  insert(['P114', 'P115']) 
PUSH P114 1 ;  key, offset = 0 
PUSH R235 4 ;  R235, offset = -33 
CALL M116 
PEEK L236 ;  get return value 
RETURN L236 ; return bool L236 from function func 
skipelse234 JMP skipelse237 ;  Jump skipelse237 
skipif227 REF P115 I129 R238 ;  R238 = node.root offset = 12 
GT R238 P114 T239 ;  T239 = key > R238 
BF T239 skipif240 ;  BranchFalse T239 (bool) skipif240 
REF P115 I132 R241 ;  R241 = node.right offset = 0 
EQ N105 R241 T242 ;  T242 = R241 == null 
BF T242 skipif243 ;  BranchFalse T242 (bool) skipif243 
REF P115 I132 R244 ;  R244 = node.right offset = 0 
NEWI 13 L245 ;  new instance of iNode -> L245 
FRAME S268 L245 ;  static initializer for class iNode backpatched to S268 
CALL S268  backpatched to S268 
PEEK L245 
FRAME X134 L245 ['P114'] ;  iNode iNode(['P133']) 
PUSH P114 1 ;  key, offset = 0 
CALL X134 
PEEK L245 ;  get return value 
MOV L245 R244 ;  R244(offset=-57) = L245 
RETURN B113 ; return bool true from function func 
JMP skipelse247 ;  Jump skipelse247 
skipif243 REF P115 I132 R248 ;  R248 = node.right offset = 0 
FRAME M116 this ;  insert(['P114', 'P115']) 
PUSH P114 1 ;  key, offset = 0 
PUSH R248 4 ;  R248, offset = -69 
CALL M116 
PEEK L249 ;  get return value 
RETURN L249 ; return bool L249 from function func 
skipelse247 JMP skipelse237 ;  Jump skipelse250 backpatched to skipelse237 
skipif240 FRAME M135 P115 ;  void inc([]) 
CALL M135 
RETURN B117 ; return bool false from function func 
skipelse237 RTN ; return from function func 
M118 FUNC M118 ;  void print([]) 
MOV B113 I103 ;  first(offset=4) = true 
FRAME M121 this ;  inorder(['P120']) 
PUSH I102 4 ;  root, offset = 0 
CALL M121 
WRITE H119 char ;  cout << '\n'(char) 
RTN ; return from function func 
M121 FUNC M121 ;  void inorder(['P120']) 
EQ N105 P120 T254 ;  T254 = node == null 
BF T254 skipif255 ;  BranchFalse T254 (bool) skipif255 
RTN ; return from function func 
skipif255 REF P120 I131 R256 ;  R256 = node.left offset = 4 
FRAME M121 this ;  inorder(['P120']) 
PUSH R256 4 ;  R256, offset = -8 
CALL M121 
FRAME M123 this ;  visit(['P122']) 
PUSH P120 4 ;  node, offset = 0 
CALL M123 
REF P120 I132 R259 ;  R259 = node.right offset = 0 
FRAME M121 this ;  inorder(['P120']) 
PUSH R259 4 ;  R259, offset = -20 
CALL M121 
RTN ; return from function func 
M123 FUNC M123 ;  void visit(['P122']) 
BF I103 skipif261 ;  BranchFalse I103 (bool) skipif261 
MOV B117 I103 ;  first(offset=4) = false 
WRITE H124 char ;  cout << ' '(char) 
JMP skipelse263 ;  Jump skipelse263 
skipif261 WRITE H125 char ;  cout << ','(char) 
skipelse263 REF P122 I129 R264 ;  R264 = node.root offset = 12 
WRITE R264 char ;  cout << R264(char) 
WRITE H126 char ;  cout << '('(char) 
REF P122 I130 R265 ;  R265 = node.cnt offset = 8 
WRITE R265 int ;  cout << R265(int) 
WRITE H125 char ;  cout << ','(char) 
REF P122 I130 R266 ;  R266 = node.cnt offset = 8 
FRAME M107 this ;  fib(['P106']) 
PUSH R266 4 ;  R266, offset = -16 
CALL M107 
PEEK L267 ;  get return value 
WRITE L267 int ;  cout << L267(int) 
WRITE H127 char ;  cout << ')'(char) 
RTN ; return from function func 
X134 FUNC X134 ;  Contructor for class iNode 
MOV P133 I129 ;  root(offset=12) = key 
MOV N109 I130 ;  cnt(offset=8) = 1 
RTN ; return from function xtor 
M135 FUNC M135 ;  void inc([]) 
ADD N109 I130 T274 ;  T274 = cnt + 1 
MOV T274 I130 ;  cnt(offset=8) = T274 
RTN ; return from function func 
X140 FUNC X140 ;  Contructor for class Message 
NEW N141 T277 1 ;  new array of charof size 100 
MOV T277 I137 ;  msg(offset=0) = T277 
AEF I137 N108 A280 ;  msg + 0 * sizeof char (pointer) 
MOV H142 A280 ;  A280(offset=-12) = 'A' 
AEF I137 N109 A282 ;  msg + 1 * sizeof char (pointer) 
MOV H143 A282 ;  A282(offset=-14) = 'd' 
AEF I137 N110 A284 ;  msg + 2 * sizeof char (pointer) 
MOV H143 A284 ;  A284(offset=-16) = 'd' 
AEF I137 N144 A286 ;  msg + 3 * sizeof char (pointer) 
MOV H145 A286 ;  A286(offset=-18) = 'e' 
AEF I137 N146 A288 ;  msg + 4 * sizeof char (pointer) 
MOV H143 A288 ;  A288(offset=-20) = 'd' 
AEF I137 N147 A290 ;  msg + 5 * sizeof char (pointer) 
MOV H124 A290 ;  A290(offset=-22) = ' ' 
AEF I137 N148 A292 ;  msg + 6 * sizeof char (pointer) 
MOV H149 A292 ;  A292(offset=-24) = 'E' 
AEF I137 N150 A294 ;  msg + 7 * sizeof char (pointer) 
MOV H151 A294 ;  A294(offset=-26) = 'l' 
AEF I137 N152 A296 ;  msg + 8 * sizeof char (pointer) 
MOV H145 A296 ;  A296(offset=-28) = 'e' 
AEF I137 N153 A298 ;  msg + 9 * sizeof char (pointer) 
MOV H154 A298 ;  A298(offset=-30) = 'm' 
AEF I137 N155 A300 ;  msg + 10 * sizeof char (pointer) 
MOV H145 A300 ;  A300(offset=-32) = 'e' 
AEF I137 N156 A302 ;  msg + 11 * sizeof char (pointer) 
MOV H157 A302 ;  A302(offset=-34) = 'n' 
AEF I137 N158 A304 ;  msg + 12 * sizeof char (pointer) 
MOV H159 A304 ;  A304(offset=-36) = 't' 
AEF I137 N160 A306 ;  msg + 13 * sizeof char (pointer) 
MOV H161 A306 ;  A306(offset=-38) = ':' 
MOV N162 I138 ;  i(offset=8) = 14 
AEF I137 I138 A309 ;  msg + i * sizeof char (pointer) 
MOV H163 A309 ;  A309(offset=-44) = 'D' 
ADD N109 I138 T311 ;  T311 = i + 1 
AEF I137 T311 A312 ;  msg + T311 * sizeof char (pointer) 
MOV H164 A312 ;  A312(offset=-50) = 'u' 
ADD N110 I138 T314 ;  T314 = i + 2 
AEF I137 T314 A315 ;  msg + T314 * sizeof char (pointer) 
MOV H165 A315 ;  A315(offset=-56) = 'p' 
ADD N144 I138 T317 ;  T317 = i + 3 
AEF I137 T317 A318 ;  msg + T317 * sizeof char (pointer) 
MOV H151 A318 ;  A318(offset=-62) = 'l' 
ADD N146 I138 T320 ;  T320 = i + 4 
AEF I137 T320 A321 ;  msg + T320 * sizeof char (pointer) 
MOV H166 A321 ;  A321(offset=-68) = 'i' 
ADD N147 I138 T323 ;  T323 = i + 5 
AEF I137 T323 A324 ;  msg + T323 * sizeof char (pointer) 
MOV H167 A324 ;  A324(offset=-74) = 'c' 
ADD N148 I138 T326 ;  T326 = i + 6 
AEF I137 T326 A327 ;  msg + T326 * sizeof char (pointer) 
MOV H168 A327 ;  A327(offset=-80) = 'a' 
ADD N150 I138 T329 ;  T329 = i + 7 
AEF I137 T329 A330 ;  msg + T329 * sizeof char (pointer) 
MOV H159 A330 ;  A330(offset=-86) = 't' 
ADD N152 I138 T332 ;  T332 = i + 8 
AEF I137 T332 A333 ;  msg + T332 * sizeof char (pointer) 
MOV H145 A333 ;  A333(offset=-92) = 'e' 
ADD N153 I138 T335 ;  T335 = i + 9 
AEF I137 T335 A336 ;  msg + T335 * sizeof char (pointer) 
MOV H124 A336 ;  A336(offset=-98) = ' ' 
AEF I137 N169 A338 ;  msg + 24 * sizeof char (pointer) 
MOV H149 A338 ;  A338(offset=-100) = 'E' 
AEF I137 N170 A340 ;  msg + 25 * sizeof char (pointer) 
MOV H157 A340 ;  A340(offset=-102) = 'n' 
AEF I137 N171 A342 ;  msg + 26 * sizeof char (pointer) 
MOV H159 A342 ;  A342(offset=-104) = 't' 
AEF I137 N172 A344 ;  msg + 27 * sizeof char (pointer) 
MOV H145 A344 ;  A344(offset=-106) = 'e' 
AEF I137 N173 A346 ;  msg + 28 * sizeof char (pointer) 
MOV H174 A346 ;  A346(offset=-108) = 'r' 
RTN ; return from function xtor 
M177 FUNC M177 ;  void print(['P175', 'P176']) 
begin348 LE P176 P175 T349 ;  T349 = i <= end 
BF T349 endwhile350 ;  BranchFalse T349 (bool) endwhile350 
AEF I137 P175 A351 ;  msg + i * sizeof char (pointer) 
WRITE A351 char ;  cout << A351(char) 
ADD N109 P175 T352 ;  T352 = i + 1 
MOV T352 P175 ;  i(offset=0) = T352 
JMP begin348 ;  Jump begin348 
endwhile350 RTN ; return from function func 
M179 FUNC M179 ;  void msg1(['P178']) 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH N108 4 ;  0, offset = 0 
PUSH N160 4 ;  13, offset = 0 
CALL M177 
WRITE P178 char ;  cout << elm(char) 
WRITE H119 char ;  cout << '\n'(char) 
RTN ; return from function func 
M181 FUNC M181 ;  void msg2(['P180']) 
MOV N162 I138 ;  i(offset=8) = 14 
ADD N152 I138 T356 ;  T356 = i + 8 
MOV T356 I139 ;  end(offset=4) = T356 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH I138 4 ;  i, offset = 8 
PUSH I139 4 ;  end, offset = 4 
CALL M177 
AEF I137 N147 A359 ;  msg + 5 * sizeof char (pointer) 
WRITE A359 char ;  cout << A359(char) 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH N148 4 ;  6, offset = 0 
PUSH N160 4 ;  13, offset = 0 
CALL M177 
WRITE P180 char ;  cout << elm(char) 
WRITE H119 char ;  cout << '\n'(char) 
RTN ; return from function func 
M182 FUNC M182 ;  void msg3([]) 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH N169 4 ;  24, offset = 0 
PUSH N173 4 ;  28, offset = 0 
CALL M177 
MOV N147 I138 ;  i(offset=8) = 5 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH I138 4 ;  i, offset = 8 
PUSH I138 4 ;  i, offset = 8 
CALL M177 
FRAME M177 this ;  print(['P175', 'P176']) 
PUSH N148 4 ;  6, offset = 0 
PUSH N160 4 ;  13, offset = 0 
CALL M177 
RTN ; return from function func 
X189 FUNC X189 ;  Contructor for class Syntax 
MOV P187 I184 ;  i(offset=4) = j 
MOV P188 I185 ;  c(offset=8) = d 
RTN ; return from function xtor 
M190 FUNC M190 ;  void checkit([]) 
NEW N192 T371 1 ;  new array of charof size 1000 
MOV T371 L191 ;  cc(offset=0) = T371 
NEW N194 T374 4 ;  new array of intof size 512 
MOV T374 L193 ;  ii(offset=-16) = T374 
NEW N196 T377 4 ;  new array of Syntaxof size 256 
MOV T377 L195 ;  ss(offset=-32) = T377 
AEF L191 N109 A380 ;  cc + 1 * sizeof char (pointer) 
AEF L191 N110 A381 ;  cc + 2 * sizeof char (pointer) 
MOV A381 A380 ;  A380(offset=-48) = A381 
AEF L191 N197 A383 ;  cc + 31 * sizeof char (pointer) 
MOV I185 A383 ;  A383(offset=-51) = c 
AEF L191 N141 A385 ;  cc + 100 * sizeof char (pointer) 
MOV I185 A385 ;  A385(offset=-53) = c 
AEF L191 N155 A387 ;  cc + 10 * sizeof char (pointer) 
MOV I185 A387 ;  A387(offset=-55) = c 
MOV L193 L193 ;  ii(offset=-16) = ii 
AEF L193 N146 A390 ;  ii + 4 * sizeof int (pointer) 
ADD I184 N147 T391 ;  T391 = 5 + i 
MOV T391 A390 ;  A390(offset=-61) = T391 
AEF L193 N198 A393 ;  ii + 5000 * sizeof int (pointer) 
ADD I184 N147 T394 ;  T394 = 5 + i 
MOV T394 A393 ;  A393(offset=-73) = T394 
AEF L193 N108 A396 ;  ii + 0 * sizeof int (pointer) 
MOV A396 I184 ;  i(offset=4) = A396 
AEF L195 N108 A398 ;  ss + 0 * sizeof Syntax (pointer) 
NEWI 9 L399 ;  new instance of Syntax -> L399 
FRAME S365 L399 ;  static initializer for class Syntax backpatched to S365 
CALL S365  backpatched to S365 
PEEK L399 
FRAME X189 L399 ['N150', 'H167'] ;  Syntax Syntax(['P187', 'P188']) 
PUSH N150 4 ;  7, offset = 0 
PUSH H167 1 ;  'c', offset = 0 
CALL X189 
PEEK L399 ;  get return value 
MOV L399 A398 ;  A398(offset=-93) = L399 
AEF L195 I184 A401 ;  ss + i * sizeof Syntax (pointer) 
ADD N109 I184 T402 ;  T402 = i + 1 
AEF L195 T402 A403 ;  ss + T402 * sizeof Syntax (pointer) 
MOV A403 A401 ;  A401(offset=-105) = A403 
DIV N144 N150 T405 ;  T405 = 7 / 3 
ADD T405 I184 T406 ;  T406 = i + T405 
AEF L195 T406 A407 ;  ss + T406 * sizeof Syntax (pointer) 
NEWI 9 L408 ;  new instance of Syntax -> L408 
FRAME S365 L408 ;  static initializer for class Syntax backpatched to S365 
CALL S365  backpatched to S365 
PEEK L408 
FRAME X189 L408 ['I184', 'I185'] ;  Syntax Syntax(['P187', 'P188']) 
PUSH I184 4 ;  i, offset = 4 
PUSH I185 1 ;  c, offset = 8 
CALL X189 
PEEK L408 ;  get return value 
MOV L408 A407 ;  A407(offset=-129) = L408 
AEF L193 N108 A410 ;  ii + 0 * sizeof int (pointer) 
FRAME M200 this ;  which(['P199']) 
PUSH A410 4 ;  A410, offset = -141 
CALL M200 
PEEK L411 ;  get return value 
RTN ; return from function func 
M200 FUNC M200 ;  int which(['P199']) 
MUL P199 P199 T412 ;  T412 = i * i 
MOV T412 P199 ;  i(offset=0) = T412 
RETURN P199 ; return int i from function func 
RTN ; return from function func 
M201 FUNC M201 ; void kxi2016 main() 
NEWI 12 L414 ;  new instance of Message -> L414 
FRAME S276 L414 ;  static initializer for class Message backpatched to S276 
CALL S276  backpatched to S276 
PEEK L414 
FRAME X140 L414 ;  Message Message([]) 
CALL X140 
PEEK L414 ;  get return value 
MOV L414 L204 ;  msg(offset=-5) = L414 
NEWI 8 L416 ;  new instance of iTree -> L416 
FRAME S206 L416 ;  static initializer for class iTree backpatched to S206 
CALL S206  backpatched to S206 
PEEK L416 
FRAME X104 L416 ;  iTree iTree([]) 
CALL X104 
PEEK L416 ;  get return value 
MOV L416 L203 ;  tree(offset=-1) = L416 
FRAME M182 L204 ;  void msg3([]) 
CALL M182 
READ L202 char ;  cin >> key(char) 
WRITE H119 char ;  cout << '\n'(char) 
begin419 NE H205 L202 T420 ;  T420 = key != '!' 
BF T420 endwhile421 ;  BranchFalse T420 (bool) endwhile421 
FRAME M112 L203 ['L202'] ;  bool add(['P111']) 
PUSH L202 1 ;  key, offset = 0 
CALL M112 
PEEK L422 ;  get return value 
BF L422 skipif423 ;  BranchFalse L422 (bool) skipif423 
FRAME M179 L204 ['L202'] ;  void msg1(['P178']) 
PUSH L202 1 ;  key, offset = 0 
CALL M179 
FRAME M118 L203 ;  void print([]) 
CALL M118 
JMP skipelse426 ;  Jump skipelse426 
skipif423 FRAME M181 L204 ['L202'] ;  void msg2(['P180']) 
PUSH L202 1 ;  key, offset = 0 
CALL M181 
FRAME M118 L203 ;  void print([]) 
CALL M118 
skipelse426 FRAME M182 L204 ;  void msg3([]) 
CALL M182 
READ L202 char ;  cin >> key(char) 
WRITE H119 char ;  cout << '\n'(char) 
JMP begin419 ;  Jump begin419 
endwhile421 RTN ; return from function main 
S276 FUNC S276 ;  static initializer for classMessage 
RTN ; return from static initializer for Message 
S206 FUNC S206 ;  static initializer for classiTree 
RTN ; return from static initializer for iTree 
S365 FUNC S365 ;  static initializer for classSyntax 
MOV N150 I184 ;  i(offset=4) = 7 
MOV H168 I185 ;  c(offset=8) = 'a' 
MOV B117 I186 ;  b(offset=0) = false 
RTN ; return from static initializer for Syntax 
S268 FUNC S268 ;  static initializer for classiNode 
MOV N108 I130 ;  cnt(offset=8) = 0 
MOV N105 I131 ;  left(offset=4) = null 
MOV N105 I132 ;  right(offset=0) = null 
RTN ; return from static initializer for iNode 
N172 .INT 27 
N173 .INT 28 
N170 .INT 25 
N171 .INT 26 
B113 .INT 1 
B117 .INT 0 
H149 .BYT E 
H143 .BYT d 
H142 .BYT A 
H145 .BYT e 
N160 .INT 13 
N162 .INT 14 
N169 .INT 24 
N198 .INT 5000 
N194 .INT 512 
N196 .INT 256 
N197 .INT 31 
N192 .INT 1000 
N110 .INT 2 
H205 .BYT ! 
H127 .BYT ) 
H126 .BYT ( 
H125 .BYT , 
H124 .BYT   
N105 .INT 0 
N109 .INT 1 
N108 .INT 0 
H119 .BYT \n 
N148 .INT 6 
N141 .INT 100 
N144 .INT 3 
H174 .BYT r 
N158 .INT 12 
H163 .BYT D 
H161 .BYT : 
H167 .BYT c 
H166 .BYT i 
H165 .BYT p 
H164 .BYT u 
N150 .INT 7 
N152 .INT 8 
H168 .BYT a 
N155 .INT 10 
N156 .INT 11 
N153 .INT 9 
H159 .BYT t 
H157 .BYT n 
H154 .BYT m 
N147 .INT 5 
N146 .INT 4 
H151 .BYT l 
End STOP ; end of code, beginning of heap 
